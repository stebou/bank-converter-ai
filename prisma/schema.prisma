generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String            @id @default(cuid())
  clerkId                String            @unique
  email                  String            @unique
  name                   String?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime
  currentPlan            String            @default("free")
  documentsUsed          Int               @default(0)
  documentsLimit         Int               @default(5)
  stripeCustomerId       String?           @unique @map("stripe_customer_id")
  stripe_subscription_id String?           @unique
  subscription_status    String?
  bankAccounts           BankAccount[]
  bankTransactions       BankTransaction[]
  bridgeSessions         BridgeSession[]
  chatMessages           ChatMessage[]
  ownedCompanies         Company[]         @relation("CompanyOwner")
  companyLists           CompanyList[]
  conversations          Conversation[]
  documents              Document[]
  payments               Payment[]

  @@map("users")
}

model Document {
  id                String        @id @default(cuid())
  userId            String
  filename          String
  status            String
  createdAt         DateTime      @default(now())
  originalName      String
  fileSize          Int
  mimeType          String
  bankDetected      String?
  aiConfidence      Float?
  processingTime    Float?
  aiCost            Float?
  ocrConfidence     Float?
  totalTransactions Int           @default(0)
  anomaliesDetected Int           @default(0)
  extractedText     String?
  lastAnalyzedAt    DateTime?
  summary           String?
  fileContent       Bytes?
  chatMessages      ChatMessage[]
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      Transaction[]

  @@map("documents")
}

model ChatMessage {
  id         String    @id @default(cuid())
  userId     String
  documentId String?
  role       String
  content    String
  tokens     Int?
  cost       Float?
  createdAt  DateTime  @default(now())
  document   Document? @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Transaction {
  id           String   @id @default(cuid())
  documentId   String
  date         DateTime
  amount       Float
  description  String
  originalDesc String
  category     String?
  subcategory  String?
  aiConfidence Float?
  anomalyScore Float?
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Plan {
  id              String    @id @default(cuid())
  name            String    @unique
  description     String?
  price           Float
  documentsLimit  Int
  features        Json?
  stripePriceId   String    @unique @map("stripe_price_id")
  stripeProductId String    @unique @map("stripe_product_id")
  payments        Payment[]

  @@map("plans")
}

model Payment {
  id              String   @id @default(cuid())
  userId          String
  planId          String?
  stripeSessionId String?  @unique @map("stripe_session_id")
  amount          Float
  currency        String   @default("eur")
  status          String
  description     String
  createdAt       DateTime @default(now())
  bridgePaymentId String?  @unique @map("bridge_payment_id")
  paymentUrl      String?  @map("payment_url")
  planType        String?  @map("plan_type")
  plan            Plan?    @relation(fields: [planId], references: [id])
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Conversation {
  id            String                @id @default(cuid())
  userId        String
  title         String
  isFavorite    Boolean               @default(false)
  lastMessageAt DateTime              @default(now())
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  messages      ConversationMessage[]
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("conversations")
}

model ConversationMessage {
  id                  String       @id @default(cuid())
  conversationId      String
  role                String
  content             String
  documentIds         Json?
  referencedDocuments Json?
  tokens              Int?
  cost                Float?
  createdAt           DateTime     @default(now())
  conversation        Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("conversation_messages")
}

model BankAccount {
  id              String            @id @default(cuid())
  userId          String
  bridgeAccountId String            @unique @map("bridge_account_id")
  name            String
  type            String
  balance         Float             @default(0)
  currency        String            @default("EUR")
  iban            String?
  bankName        String            @map("bank_name")
  isActive        Boolean           @default(true) @map("is_active")
  lastSyncAt      DateTime?         @map("last_sync_at")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  bridgeItemId    String            @map("bridge_item_id")
  disconnectedAt  DateTime?         @map("disconnected_at")
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    BankTransaction[]

  @@map("bank_accounts")
}

model BankTransaction {
  id                  String      @id @default(cuid())
  userId              String
  accountId           String      @map("account_id")
  bridgeTransactionId String      @unique @map("bridge_transaction_id")
  amount              Float
  description         String
  transactionDate     DateTime    @map("transaction_date")
  category            String?
  subcategory         String?
  type                String
  currency            String      @default("EUR")
  aiConfidence        Float?      @map("ai_confidence")
  isRecurring         Boolean     @default(false) @map("is_recurring")
  tags                Json?
  createdAt           DateTime    @default(now()) @map("created_at")
  account             BankAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([accountId])
  @@index([transactionDate])
  @@map("bank_transactions")
}

model CompanyList {
  id          String    @id @default(cuid())
  name        String
  description String?
  color       String?   @default("#3b82f6")
  isArchived  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  companies   Company[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        Tag[]

  @@index([userId])
  @@index([createdAt])
  @@map("company_lists")
}

model Company {
  id                        String        @id @default(cuid())
  siren                     String        @unique
  siret                     String        @unique
  denomination              String
  website                   String?
  secteur                   String?
  industrie                 String?
  emplacement               String?
  ville                     String?
  codePostal                String?
  adresseComplete           String?
  activitePrincipale        String?
  activitePrincipaleLibelle String?
  categorieJuridique        String?
  trancheEffectifs          String?
  etatAdministratif         String?
  siege                     Boolean       @default(false)
  dateCreation              DateTime?
  statut                    CompanyStatus @default(NEW)
  notes                     String?
  linkedinUrl               String?
  phoneNumber               String?
  email                     String?
  contactPerson             String?
  addedAt                   DateTime      @default(now())
  lastUpdatedFromINSEE      DateTime      @default(now())
  ownerId                   String
  companyListId             String
  companyList               CompanyList   @relation(fields: [companyListId], references: [id], onDelete: Cascade)
  owner                     User          @relation("CompanyOwner", fields: [ownerId], references: [id])
  tags                      CompanyTag[]
  dirigeants                Dirigeant[]

  @@index([siren])
  @@index([siret])
  @@index([companyListId])
  @@index([ownerId])
  @@index([lastUpdatedFromINSEE])
  @@map("companies")
}

model Dirigeant {
  id            String  @id @default(cuid())
  prenom        String
  nom           String
  nomUsage      String?
  pseudonyme    String?
  qualite       String?
  dateNaissance String?
  companyId     String
  company       Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@map("dirigeants")
}

model Tag {
  id            String       @id @default(cuid())
  name          String
  color         String       @default("#6b7280")
  createdAt     DateTime     @default(now())
  companyListId String
  companies     CompanyTag[]
  companyList   CompanyList  @relation(fields: [companyListId], references: [id], onDelete: Cascade)

  @@unique([name, companyListId])
  @@index([companyListId])
  @@map("tags")
}

model CompanyTag {
  id        String  @id @default(cuid())
  companyId String
  tagId     String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([companyId, tagId])
  @@map("company_tags")
}

enum CompanyStatus {
  NEW
  PROSPECT
  IMPORTED
  CONTACTED
  INTERESTED
  NEGOTIATING
  CLOSED_WON
  CLOSED_LOST
  NONPROFIT
  INACTIVE
}

model BridgeSession {
  id           String    @id @default(cuid())
  sessionId    String    @unique
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  status       String    @default("pending") // pending, completed, failed, abandoned
  connectUrl   String
  itemId       String?   // ID de la connexion créée
  errorCode    String?
  errorMessage String?
  expiresAt    DateTime
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@index([userId])
  @@index([status])
  @@map("bridge_sessions")
}
