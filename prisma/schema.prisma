generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // URL pour votre application (utilise le pooler)
  url       = env("DATABASE_URL")
 
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Subscription
  stripeCustomerId   String?
  stripeSubscriptionId String?
  subscriptionStatus String? // active, canceled, incomplete
  currentPlan        String  @default("free") // free, smart, professional, enterprise
  documentsUsed      Int     @default(0)
  documentsLimit     Int     @default(5) // Free plan limit
  
  // Relations
  documents Document[]
  
  @@map("users")
}

model Document {
  id         String   @id @default(cuid())
  userId     String
  filename   String
  status     String   // processing, completed, failed
  createdAt  DateTime @default(now())
  
  // File info
  originalName    String
  fileSize        Int
  mimeType        String
  
  // AI Processing results
  bankDetected    String?
  aiConfidence    Float?
  processingTime  Float?
  aiCost          Float?
  ocrConfidence   Float?
  
  // Results
  totalTransactions Int      @default(0)
  anomaliesDetected Int      @default(0)
  
  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  
  @@map("documents")
}

model Transaction {
  id            String   @id @default(cuid())
  documentId    String
  
  // Transaction data
  date          DateTime
  amount        Float
  description   String
  originalDesc  String
  
  // AI Enhancement
  category      String?
  subcategory   String?
  aiConfidence  Float?
  anomalyScore  Float?
  
  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
}

model Plan {
  id              String @id @default(cuid())
  name            String @unique
  description     String
  price           Float
  documentsLimit  Int
  features        Json
  stripeProductId String
  stripePriceId   String
  
  @@map("plans")
}