// Fichier : prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(cuid())
  clerkId            String   @unique
  email              String   @unique
  name               String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // --- Champs Stripe ---
  // MODIFICATION : Ajout de @map pour une convention de nommage propre en base de données.
  stripeCustomerId   String?  @unique @map("stripe_customer_id")
  stripeSubscriptionId String?  @unique @map("stripe_subscription_id")
  subscriptionStatus String?  @map("subscription_status")
  
  // --- Limites et Plans ---
  currentPlan        String   @default("free")
  documentsUsed      Int      @default(0)
  documentsLimit     Int      @default(5)

  // --- Relations ---
  documents          Document[]
  payments           Payment[]
  chatMessages       ChatMessage[]

  @@map("users")
}

model Document {
  id                String   @id @default(cuid())
  userId            String
  filename          String
  status            String   
  createdAt         DateTime @default(now())
  originalName      String
  fileSize          Int
  mimeType          String
  bankDetected      String?
  aiConfidence      Float?
  processingTime    Float?
  aiCost            Float?
  ocrConfidence     Float?
  totalTransactions Int      @default(0)
  anomaliesDetected Int      @default(0)
  
  // --- Nouveau : Contenu extrait pour l'IA ---
  extractedText     String?  // Texte complet extrait du PDF
  summary           String?  // Résumé généré par l'IA
  lastAnalyzedAt    DateTime? // Dernière analyse IA

  // --- Relations ---
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      Transaction[]
  chatMessages      ChatMessage[]

  @@map("documents")
}

model ChatMessage {
  id          String   @id @default(cuid())
  userId      String
  documentId  String?  // Optionnel, pour les questions spécifiques à un document
  role        String   // "user" ou "assistant"
  content     String   // Le message
  tokens      Int?     // Nombre de tokens utilisés
  cost        Float?   // Coût du message
  createdAt   DateTime @default(now())

  // --- Relations ---
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document    Document? @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Transaction {
  id            String   @id @default(cuid())
  documentId    String
  date          DateTime
  amount        Float
  description   String
  originalDesc  String
  category      String?
  subcategory   String?
  aiConfidence  Float?
  anomalyScore  Float?

  // --- Relations ---
  document      Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

// MODIFICATION : Votre modèle Plan est parfait. J'ai juste rendu la description optionnelle.
model Plan {
  id              String  @id @default(cuid())
  name            String  @unique // Ex: "Pack 50 Crédits", "Abonnement Pro"
  description     String?
  price           Float
  documentsLimit  Int     // Le nombre de crédits que ce plan donne/ajoute
  features        Json?   // Vous pouvez garder ça pour plus tard
  
  // --- Champs Stripe ---
  stripeProductId String  @unique @map("stripe_product_id")
  stripePriceId   String  @unique @map("stripe_price_id")

  // --- Relations ---
  payments        Payment[]

  @@map("plans")
}

model Payment {
  id              String   @id @default(cuid())
  userId          String
  planId          String?
  stripeSessionId String?  @unique @map("stripe_session_id")
  amount          Float
  currency        String   @default("eur")
  status          String   // "pending", "completed", "failed"
  description     String
  createdAt       DateTime @default(now())
  
  // --- Relations ---
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan            Plan?    @relation(fields: [planId], references: [id])

  @@map("payments")
}