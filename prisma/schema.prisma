generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(cuid())
  clerkId              String         @unique
  email                String         @unique
  name                 String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  currentPlan          String         @default("free")
  documentsUsed        Int            @default(0)
  documentsLimit       Int            @default(5)
  stripeCustomerId     String?        @unique @map("stripe_customer_id")
  stripeSubscriptionId String?        @unique @map("stripe_subscription_id")
  subscriptionStatus   String?        @map("subscription_status")
  chatMessages         ChatMessage[]
  conversations        Conversation[]
  documents            Document[]
  payments             Payment[]
  bankAccounts         BankAccount[]
  bankTransactions     BankTransaction[]

  @@map("users")
}

model Document {
  id                String        @id @default(cuid())
  userId            String
  filename          String
  status            String
  createdAt         DateTime      @default(now())
  originalName      String
  fileSize          Int
  mimeType          String
  bankDetected      String?
  aiConfidence      Float?
  processingTime    Float?
  aiCost            Float?
  ocrConfidence     Float?
  totalTransactions Int           @default(0)
  anomaliesDetected Int           @default(0)
  extractedText     String?
  lastAnalyzedAt    DateTime?
  summary           String?
  fileContent       Bytes?
  chatMessages      ChatMessage[]
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      Transaction[]

  @@map("documents")
}

model ChatMessage {
  id         String    @id @default(cuid())
  userId     String
  documentId String?
  role       String
  content    String
  tokens     Int?
  cost       Float?
  createdAt  DateTime  @default(now())
  document   Document? @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Transaction {
  id           String   @id @default(cuid())
  documentId   String
  date         DateTime
  amount       Float
  description  String
  originalDesc String
  category     String?
  subcategory  String?
  aiConfidence Float?
  anomalyScore Float?
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Plan {
  id              String    @id @default(cuid())
  name            String    @unique
  description     String?
  price           Float
  documentsLimit  Int
  features        Json?
  stripePriceId   String    @unique @map("stripe_price_id")
  stripeProductId String    @unique @map("stripe_product_id")
  payments        Payment[]

  @@map("plans")
}

model Payment {
  id              String   @id @default(cuid())
  userId          String
  planId          String?
  stripeSessionId String?  @unique @map("stripe_session_id")
  amount          Float
  currency        String   @default("eur")
  status          String
  description     String
  createdAt       DateTime @default(now())
  plan            Plan?    @relation(fields: [planId], references: [id])
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Conversation {
  id            String                @id @default(cuid())
  userId        String
  title         String
  isFavorite    Boolean               @default(false)
  lastMessageAt DateTime              @default(now())
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  messages      ConversationMessage[]
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("conversations")
}

model ConversationMessage {
  id                  String       @id @default(cuid())
  conversationId      String
  role                String
  content             String
  documentIds         Json?
  referencedDocuments Json?
  tokens              Int?
  cost                Float?
  createdAt           DateTime     @default(now())
  conversation        Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("conversation_messages")
}

model BankAccount {
  id               String            @id @default(cuid())
  userId           String
  bridgeAccountId  String            @unique @map("bridge_account_id")
  name             String
  type             String
  balance          Float             @default(0)
  currency         String            @default("EUR")
  iban             String?
  bankName         String            @map("bank_name")
  isActive         Boolean           @default(true) @map("is_active")
  lastSyncAt       DateTime?         @map("last_sync_at")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions     BankTransaction[]

  @@map("bank_accounts")
}

model BankTransaction {
  id                    String      @id @default(cuid())
  userId                String
  accountId             String      @map("account_id")
  bridgeTransactionId   String      @unique @map("bridge_transaction_id")
  amount                Float
  description           String
  transactionDate       DateTime    @map("transaction_date")
  category              String?
  subcategory           String?
  type                  String
  currency              String      @default("EUR")
  aiConfidence          Float?      @map("ai_confidence")
  isRecurring           Boolean     @default(false) @map("is_recurring")
  tags                  Json?
  createdAt             DateTime    @default(now()) @map("created_at")
  user                  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  account               BankAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([accountId])
  @@index([transactionDate])
  @@map("bank_transactions")
}
