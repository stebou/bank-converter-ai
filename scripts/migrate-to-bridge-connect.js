#!/usr/bin/env node

/**
 * Script de migration vers Bridge Connect Modal officielle
 * 
 * Ce script facilite la migration de l'ancien ConnectAccountModal
 * vers la nouvelle BridgeConnectModal bas√©e sur l'iframe officielle Bridge.
 */

const fs = require('fs');
const path = require('path');

console.log('üåâ Migration vers Bridge Connect Modal Officielle');
console.log('================================================\n');

// Configuration
const PROJECT_ROOT = process.cwd();
const SRC_DIR = path.join(PROJECT_ROOT, 'src');

// Fichiers √† mettre √† jour
const filesToUpdate = [
  {
    path: 'src/components/ProBankingDashboard.tsx',
    oldImport: "import ConnectAccountModal from './ConnectAccountModal';",
    newImport: "import BridgeConnectModal from './BridgeConnectModal';",
    oldComponent: '<ConnectAccountModal',
    newComponent: '<BridgeConnectModal',
    description: 'Dashboard bancaire principal'
  },
  {
    path: 'src/app/dashboard/page.tsx',
    oldImport: "import ConnectAccountModal from '@/components/ConnectAccountModal';",
    newImport: "import BridgeConnectModal from '@/components/BridgeConnectModal';",
    oldComponent: '<ConnectAccountModal',
    newComponent: '<BridgeConnectModal',
    description: 'Page dashboard (si utilis√©)'
  }
];

// V√©rifications pr√©liminaires
function checkPrerequisites() {
  console.log('üîç V√©rification des pr√©requis...');
  
  // V√©rifier que le nouveau composant existe
  const newModalPath = path.join(SRC_DIR, 'components', 'BridgeConnectModal.tsx');
  if (!fs.existsSync(newModalPath)) {
    console.error('‚ùå Le fichier BridgeConnectModal.tsx n\'existe pas');
    console.error('   Assurez-vous que le nouveau composant a √©t√© cr√©√©');
    process.exit(1);
  }
  
  // V√©rifier les variables d'environnement Bridge
  if (!process.env.BRIDGE_CLIENT_ID || !process.env.BRIDGE_CLIENT_SECRET) {
    console.warn('‚ö†Ô∏è  Variables Bridge non configur√©es:');
    console.warn('   BRIDGE_CLIENT_ID et BRIDGE_CLIENT_SECRET requis');
    console.warn('   Le mode d√©mo sera utilis√© par d√©faut\n');
  }
  
  console.log('‚úÖ Pr√©requis valid√©s\n');
}

// Sauvegarder l'ancien fichier
function backupFile(filePath) {
  const backupPath = `${filePath}.backup-${Date.now()}`;
  if (fs.existsSync(filePath)) {
    fs.copyFileSync(filePath, backupPath);
    console.log(`üì¶ Sauvegarde: ${path.basename(backupPath)}`);
    return backupPath;
  }
  return null;
}

// Mettre √† jour un fichier
function updateFile(fileConfig) {
  const fullPath = path.join(PROJECT_ROOT, fileConfig.path);
  
  if (!fs.existsSync(fullPath)) {
    console.log(`‚è≠Ô∏è  Fichier ignor√©: ${fileConfig.path} (n'existe pas)`);
    return false;
  }
  
  console.log(`üîÑ Mise √† jour: ${fileConfig.description}`);
  console.log(`   Fichier: ${fileConfig.path}`);
  
  // Sauvegarder
  const backupPath = backupFile(fullPath);
  
  // Lire le contenu
  let content = fs.readFileSync(fullPath, 'utf8');
  let hasChanges = false;
  
  // Remplacer l'import
  if (content.includes(fileConfig.oldImport)) {
    content = content.replace(fileConfig.oldImport, fileConfig.newImport);
    hasChanges = true;
    console.log('   ‚úÖ Import mis √† jour');
  }
  
  // Remplacer l'utilisation du composant
  if (content.includes(fileConfig.oldComponent)) {
    content = content.replace(
      new RegExp(fileConfig.oldComponent, 'g'), 
      fileConfig.newComponent
    );
    hasChanges = true;
    console.log('   ‚úÖ Composant mis √† jour');
  }
  
  if (hasChanges) {
    fs.writeFileSync(fullPath, content, 'utf8');
    console.log('   üìù Fichier sauvegard√©');
  } else {
    console.log('   ‚ÑπÔ∏è  Aucune modification n√©cessaire');
    // Supprimer la sauvegarde si pas de changements
    if (backupPath && fs.existsSync(backupPath)) {
      fs.unlinkSync(backupPath);
    }
  }
  
  console.log('');
  return hasChanges;
}

// V√©rifier la configuration Bridge
function checkBridgeConfig() {
  console.log('üîß V√©rification de la configuration Bridge...');
  
  const envPath = path.join(PROJECT_ROOT, '.env.local');
  if (!fs.existsSync(envPath)) {
    console.warn('‚ö†Ô∏è  Fichier .env.local non trouv√©');
    console.warn('   Cr√©ez ce fichier avec vos credentials Bridge\n');
    return;
  }
  
  const envContent = fs.readFileSync(envPath, 'utf8');
  const requiredVars = [
    'BRIDGE_CLIENT_ID',
    'BRIDGE_CLIENT_SECRET',
    'BRIDGE_API_URL',
    'BRIDGE_ENVIRONMENT'
  ];
  
  const missingVars = requiredVars.filter(varName => 
    !envContent.includes(varName)
  );
  
  if (missingVars.length > 0) {
    console.warn('‚ö†Ô∏è  Variables manquantes dans .env.local:');
    missingVars.forEach(varName => console.warn(`   - ${varName}`));
    console.warn('');
  } else {
    console.log('‚úÖ Configuration Bridge compl√®te\n');
  }
}

// G√©n√©rer un rapport de migration
function generateReport(changedFiles) {
  console.log('üìä Rapport de migration');
  console.log('======================');
  
  if (changedFiles.length === 0) {
    console.log('‚ÑπÔ∏è  Aucun fichier modifi√© - migration d√©j√† effectu√©e');
    return;
  }
  
  console.log(`‚úÖ ${changedFiles.length} fichier(s) mis √† jour:`);
  changedFiles.forEach(file => console.log(`   - ${file}`));
  console.log('');
  
  console.log('üìã Prochaines √©tapes:');
  console.log('1. Testez l\'application en mode d√©veloppement');
  console.log('2. V√©rifiez que la modale Bridge s\'ouvre correctement');
  console.log('3. Testez la connexion avec Demo Bank (ID: 574)');
  console.log('4. Configurez les domaines autoris√©s dans Dashboard Bridge');
  console.log('5. Activez l\'iframe avec le support Bridge (si n√©cessaire)');
  console.log('');
  
  console.log('üîó Ressources utiles:');
  console.log('- Documentation: docs/BRIDGE_CONNECT_MODAL_OFFICIAL.md');
  console.log('- Dashboard Bridge: https://dashboard.bridgeapi.io');
  console.log('- API Reference: https://docs.bridgeapi.io');
  console.log('');
}

// Fonction principale
function main() {
  try {
    checkPrerequisites();
    checkBridgeConfig();
    
    console.log('üöÄ D√©but de la migration...\n');
    
    const changedFiles = [];
    
    // Mettre √† jour chaque fichier
    filesToUpdate.forEach(fileConfig => {
      if (updateFile(fileConfig)) {
        changedFiles.push(fileConfig.path);
      }
    });
    
    generateReport(changedFiles);
    
    console.log('üéâ Migration termin√©e avec succ√®s !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error.message);
    process.exit(1);
  }
}

// Ex√©cuter la migration
if (require.main === module) {
  main();
}

module.exports = {
  main,
  updateFile,
  checkPrerequisites
};
